The idea would be to use the CSS of the parent element to change the editor’s size in response to user actions (or using browsers’ resize CSS support), and then call requestMeasure to make sure the editor picks up on any layout changes it needs to make. 

You are right. Changing the CSS of the parent element achieved the result. And it seems there is no need to call requestMeasure() , as everything works fine after resizing.

/* it parent node */
.a-demo-cm6  {
  resize: vertical;
  overflow: auto;
}
/* let .cm-editor auto grow */
.a-demo-cm6 .cm-editor {
  height: 100%;
  max-height: 400px;
}
/* give cm6 a minimal height*/
.a-demo-cm6 .cm-gutter, .a-demo-cm6 .cm-contnet {
  min-height: 100px;
}
And here is the detailed and interactive demo:
https://pagehelper.lets-script.com/blog/codemirror6-resize/ 73



https://stackoverflow.com/questions/78639389/problem-with-adjusting-the-size-of-codemirror-within-its-parent
----------------------------------------------------------------
phpcs: Request workspace/configuration failed with message: Unable to locate phpcs. Please add phpcs to your global path or use composer dependency manager to install it in your project locally.
----------------------------------------------------------------
the lower right corner dragger ui element is gone
----------------------------------------------------------------
scaling between the two windows in template editor looks like it's effecting the textareas now, but it's pretty borked.
----------------------------------------------------------------

$('#toggle-view').on('change', function() {
    // Debugging: Check if the event fires
    console.log('Toggle View Change Event Triggered');

    // Ensure editorDescription is initialized
    if (editorDescription && editorDescription.codemirror) {
        if ($(this).is(':checked')) {
            console.log('Switching to Output View');
            $('#html-editor-view').hide();
            $('#html-rendered-output').html(editorDescription.codemirror.getValue());
            $('#html-output-view').show();
        } else {
            console.log('Switching to Editor View');
            $('#html-output-view').hide();
            $('#html-editor-view').show();
        }
    } else {
        console.error('editorDescription or CodeMirror instance is not initialized.');
    }
});
-----------------------------------------------------------------
current structure of modal
--------------------------------------------------------
	TEMPLATE EDITOR HEADER
		TITLE | BUTTON CONTAINER
			SAVE BUTTON | CANCEL BUTTON
--------------------------------------------------------
	DESCRIPTION CONTAINER
		DESCRIPTION HEADER (H4)
			TITLE | VIEW TOGGLE
		HTML EDITOR VIEW
		JSON HEADER DIVIDER (H4)
--------------------------------------------------------
	JSON EDITOR CONTAINER
		RESIZABLE HANDLE


There's a bit of an imbalance in how the two editor containers are structured.  I think a better structure would be

proposed structure of modal
--------------------------------------------------------
	TEMPLATE EDITOR HEADER
		TITLE | BUTTON CONTAINER
			SAVE BUTTON | CANCEL BUTTON
--------------------------------------------------------
	DESCRIPTION CONTAINER
		DESCRIPTION HEADER
			TITLE | VIEW TOGGLE
		DESCRIPTION EDITOR | SCROLLBAR
--------------------------------------------------------
	JSON EDITOR CONTAINER
		JSON HEADER
			TITLE | SLIDER HANDLE
		JSON EDITOR |SCROLLBARx
--------------------------------------------------------
	TEMPLATE EDITOR FOOTER (very thin... not much more than a lower border)
		small SCALE HANDLE in Lower right corner
--------------------------------------------------------


-----------------------------------------------------------------
error that's showing up in error log

Cause: This error indicates that WordPress is trying to call a function named enqueue_jquery_ui, but it doesn't exist or isn't accessible.

I've removed all references to enqueue_jquery_ui that are in my code so not sure where this is coming from.

[26-Sep-2024 16:29:43 UTC] PHP Fatal error:  Uncaught TypeError: call_user_func_array(): Argument #1 ($callback) must be a valid callback, function "enqueue_jquery_ui" not found or invalid function name in C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\class-wp-hook.php:324
Stack trace:
#0 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#1 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\plugin.php(517): WP_Hook->do_action(Array)
#2 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\script-loader.php(2263): do_action('wp_enqueue_scri...')
#3 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\class-wp-hook.php(324): wp_enqueue_scripts('')
#4 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array)
#5 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\plugin.php(517): WP_Hook->do_action(Array)
#6 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\general-template.php(3065): do_action('wp_head')
#7 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-content\themes\hello-elementor\header.php(24): wp_head()
#8 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\template.php(810): require_once('C:\\Users\\tdeme\\...')
#9 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\template.php(745): load_template('C:\\Users\\tdeme\\...', true, Array)
#10 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\general-template.php(48): locate_template(Array, true, true, Array)
#11 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-content\plugins\elementor\modules\page-templates\templates\header-footer.php(9): get_header()
#12 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\template-loader.php(106): include('C:\\Users\\tdeme\\...')
#13 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-blog-header.php(19): require_once('C:\\Users\\tdeme\\...')
#14 C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\index.php(17): require('C:\\Users\\tdeme\\...')
#15 {main}
  thrown in C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\class-wp-hook.php on line 324


refers back to this file: C:\Users\tdeme\Local Sites\fauxstainedglasspanes\app\public\wp-includes\class-wp-hook.php

here's the comment above the code that is being identified as the root of the issue:
	/**
	 * Calls the callback functions that have been added to a filter hook.
	 *
	 * @since 4.7.0
	 *
	 * @param mixed $value The value to filter.
	 * @param array $args  Additional parameters to pass to the callback functions.
	 *                     This array is expected to include $value at index 0.
	 * @return mixed The filtered value after all hooked functions are applied to it.
	 */

here's the line referred to:  $value = call_user_func_array( $the_['function'], $args );

here's fuller context: 
	/**
	 * Calls the callback functions that have been added to a filter hook.
	 *
	 * @since 4.7.0
	 *
	 * @param mixed $value The value to filter.
	 * @param array $args  Additional parameters to pass to the callback functions.
	 *                     This array is expected to include $value at index 0.
	 * @return mixed The filtered value after all hooked functions are applied to it.
	 */
	public function apply_filters( $value, $args ) {
		if ( ! $this->callbacks ) {
			return $value;
		}

		$nesting_level = $this->nesting_level++;

		$this->iterations[ $nesting_level ] = $this->priorities;

		$num_args = count( $args );

		do {
			$this->current_priority[ $nesting_level ] = current( $this->iterations[ $nesting_level ] );

			$priority = $this->current_priority[ $nesting_level ];

			foreach ( $this->callbacks[ $priority ] as $the_ ) {
				if ( ! $this->doing_action ) {
					$args[0] = $value;
				}

				// Avoid the array_slice() if possible.
				if ( 0 === $the_['accepted_args'] ) {
					$value = call_user_func( $the_['function'] );
				} elseif ( $the_['accepted_args'] >= $num_args ) {
					$value = call_user_func_array( $the_['function'], $args );
				} else {
					$value = call_user_func_array( $the_['function'], array_slice( $args, 0, $the_['accepted_args'] ) );
				}
			}
		} while ( false !== next( $this->iterations[ $nesting_level ] ) );

		unset( $this->iterations[ $nesting_level ] );
		unset( $this->current_priority[ $nesting_level ] );

		--$this->nesting_level;

		return $value;
	}

