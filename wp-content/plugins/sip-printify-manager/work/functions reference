
js and php files and functions reference

The sequence of events for an AJAX call in the new JavaScript implementation, using a typical interaction as an example. Let's say we're performing a product action, like reloading products.

User Interaction:
The user clicks the "Reload Products" button.
Event Listener (in product-actions.js):
attachReloadProductsEvent() function catches this click event.
Handler Function (in product-actions.js):
The click triggers reloadShopProducts() function.
Prepare AJAX Data (in product-actions.js):
reloadShopProducts() prepares the FormData for the AJAX call.
Initiate AJAX Call (in product-actions.js):
reloadShopProducts() calls sip.ajax.handleAjaxAction('product_action', formData).
AJAX Handler (in ajax.js):
handleAjaxAction(actionType, formData) function is called.
Show Spinner (in ajax.js):
handleAjaxAction() calls sip.utilities.showSpinner().
Perform AJAX Call (in ajax.js):
handleAjaxAction() performs the actual $.ajax() call.
Server Processing:
The server processes the request (not in JS).
AJAX Success (in ajax.js):
On successful AJAX completion, the success callback in handleAjaxAction() is triggered.
Success Handler (in ajax.js):
The success callback calls handleSuccessResponse(actionType, response).
Module-Specific Handler (back to product-actions.js):
handleSuccessResponse() in ajax.js calls the registered success handler for 'product_action', which is sip.productActions.handleSuccessResponse(response).
Update UI (in product-actions.js):
handleSuccessResponse() in product-actions.js updates the product list in the UI.
Hide Spinner (in ajax.js):
The complete callback in handleAjaxAction() calls sip.utilities.hideSpinner().
Potential Error Handling:
If an error occurs, handleAjaxError() in ajax.js is called, which might use sip.utilities.showToast() to display an error message.
-----------------------------------------------------------------------
description of the sequence:

Page Load and Initialization:

The main PHP file includes and registers various JavaScript modules.
JavaScript files are loaded in a specific order to ensure dependencies are met.
On document ready, initialization functions are called, setting up event listeners.


User Interaction:

A user interacts with the page, for example, clicking a button in a data table.


Event Listener Activation:

An event listener, previously attached to the button during initialization, detects the click.
This listener was set up in a module-specific JavaScript file (e.g., table-actions.js).


Event Handler Execution:

The click triggers a specific handler function within the module.
This function was designed to respond to this particular user action.


Action Identification:

The handler identifies the specific action (e.g., "delete row") based on button attributes or context.


Data Collection:

Relevant data is gathered, such as the ID of the row to be deleted.
This might involve traversing the DOM or accessing data attributes.


AJAX Request Preparation:

The handler prepares data for an AJAX request, including:

The action type (e.g., "delete_row")
Necessary data (e.g., row ID)
Security tokens or nonces




Central AJAX Function Call:

The module calls a centralized AJAX handling function, likely defined in a core JavaScript file.
This function is designed to manage all AJAX requests consistently across the application.


Pre-Request UI Update:

Before sending the request, the UI is updated:

A loading spinner might appear over the affected area.
The clicked button or relevant section might be disabled to prevent double submission.




AJAX Request Execution:

The actual AJAX request is sent to the server.
This typically involves a POST request to a specific endpoint defined in the main PHP file.


Server-Side Processing:

The server receives the request and routes it to the appropriate handler.
Server-side code processes the action, e.g., deleting a record from the database.


Response Preparation and Sending:

The server prepares a response, typically in JSON format.
This response is sent back to the client.


Client-Side Response Reception:

The JavaScript AJAX function receives the server's response.


Response Parsing and Validation:

The response is parsed from JSON to a JavaScript object.
The response structure and content are validated.


Success/Error Determination:

Based on the response, the code determines if the operation was successful.


Handler Selection and Execution:

If successful, a success handler specific to the action type is called.
If an error occurred, an error handler is invoked instead.
These handlers were likely registered earlier during initialization.


Module-Specific Processing:

The relevant success or error handler, defined in the original module, processes the response.
This might involve preparing data for UI updates.


UI Update:

The user interface is updated based on the action's result:

For a deletion, the row might be removed from the table.
For an edit, the row's content might be updated.




Feedback to User:

The user is informed of the action's result, possibly through a toast notification.


Post-Request Cleanup:

Temporary UI elements like loading spinners are removed.
Disabled UI elements are re-enabled.


State Management:

If necessary, the application's state is updated.
This might involve updating cached data or modifying global variables.


Event Triggering:

Custom events might be triggered to notify other parts of the application about the change.


Logging:

Important information about the action and its result are logged to the console.
This aids in debugging and monitoring application behavior.


Error Handling (if applicable):

If an error occurred, additional error-specific processes might be initiated.
This could include detailed logging or displaying an error modal to the user.
------------------------------------------------
NEW JS implementation
---------------------
core/ajax.js
    init()
    handleAjaxAction(actionType, formData, buttonSelector, spinnerSelector)
    handleSuccessResponse(actionType, response)
    handleErrorResponse(errorMessage)
    handleAjaxError(jqXHR, textStatus, errorThrown, buttonSelector, spinnerSelector)
    registerSuccessHandler(actionType, handler)

core/utilities.js
    init()
    showSpinner()
    hideSpinner()
    showToast(message, duration, waitForSpinner)
    initCheckboxHandlers()
    initSearchHandlers()
    initSortHandlers()
    handleSort()
    updateSortIcons()
    sortRows()
    compareValues(a, b, column)
    getColumnIndex(column)
    comparePixels(a, b)
    compareFileSize(a, b)
    compareDates(a, b)
    parseCustomDate(dateString)
    getSortIcon(type)

modules/product-actions.js
    init()
    attachReloadProductsEvent()
    reloadShopProducts()
    attachProductActionFormSubmit()
    handleSuccessResponse(response)

modules/image-actions.js
    init()
    attachDragAndDropEvents()
    attachFileInputEvents()
    handleImageUpload(files)
    attachReloadImagesEvent()
    reloadShopImages()
    attachImageActionFormSubmit()
    handleSuccessResponse(response)

modules/template-actions.js
    init()
    attachInlineRenaming()
    attachTemplateActionFormSubmit()
    handleSuccessResponse(response)

modules/template-editor.js
    init()
    initializeTemplateEditor()
    initializeEditors(content)
    separateContent(content)
    setupResizeFunctionality(outerWindow, header, resizer, descriptionEditor, jsonEditor)
    setupToggleView(toggleButton, renderedHtml, topEditorContainer, descriptionEditor)
    setupDragging(header, outerWindow)
    handleSuccessResponse(response)

modules/creation-actions.js
    init()
    attachTemplateActionFormSubmit()
    loadProductCreationTable(templateName)
    handleCreateProduct()
    handleEditJson()
    handleSaveTemplate()
    handleCloseTemplate()
    updateProductData(key, value)
    buildCreationTable(productData)
    buildDesignCell(productData, position)
    buildDynamicImageCells(images, maxImages)
    getSizesString(productData)
    getColorsSwatches(variantIds, colorMap)
    createColorMap(colorOptions)
    handleSuccessResponse(response)

init.js
    initializeAllModules()
    initializeGlobalEventListeners()

main.js
    (anonymous function to initialize all modules on document ready)

-----------------------------------------------------------------------

creation-functions.php
	sip_handle_creation_action()

	sip_create_new_product_from_template()

	sip_get_tempate_json_from_file()

	sip_update_new_product_data()

	sip_create_product()

	sip_send_product_to_printify()

template-functions.php
	sip_save_template()

	sip_load_templates()

	sip_get_template_dir()

	sip_display_template_list()

	sip_delete_template()

	sip_rename_template()

	sip_handle_template_action()

	sip_save_template_content()

product-functions.php
	fetch_products()
()
	save_products_to_json()

	sip_display_product_list()

	sip_handle_product_action()
	
	sip_execute_product_action()

	delete_product_json()

	transform_product_data()

shop-functions.php
	fetch_shop_details()

	sip_connect_shop()

	sip_new_shop()

	sip_clear_shop()

	clear_product_jsons()

	sip_generate_encryption_key()

	sip_encrypt_token()

	sip_decrypt_token()

image-functions.php
	sip_handle_image_action()

	sip_execute_image_action()

	fetch_images()

	sip_display_image_list()

	format_file_size()

	sip_handle_image_upload()

	upload_image_to_shop()

	archive_image_on_shop()
