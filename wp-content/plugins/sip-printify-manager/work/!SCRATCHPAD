jQuery(document).ready(function($) {
    let descriptionEditor, jsonEditor;

    function initializeEditors(content) {
        const outerWindow = document.getElementById('product-editor-outer-window');
        const header = document.getElementById('product-editor-header');
        const resizer = document.getElementById('product-editor-resizer');
        const toggleButton = document.getElementById('product-editor-toggle-view');
        const topEditorContainer = document.getElementById('product-editor-top-editor');
        const bottomEditorContainer = document.getElementById('product-editor-bottom-editor');
        const renderedHtml = document.getElementById('product-editor-rendered-html');

        const separatedContent = separateContent(content);

        // Initialize editors with equal heights
        const totalHeight = outerWindow.clientHeight - header.clientHeight - resizer.clientHeight;
        const halfHeight = totalHeight / 2;

        descriptionEditor = wp.CodeMirror(topEditorContainer, {
            mode: 'htmlmixed',
            lineNumbers: true,
            lineWrapping: true,
            dragDrop: false,
            viewportMargin: Infinity,
            value: separatedContent.html
        });
    
        jsonEditor = wp.CodeMirror(bottomEditorContainer, {
            mode: 'application/json',
            lineNumbers: true,
            lineWrapping: true,
            dragDrop: false,
            viewportMargin: Infinity,
            value: separatedContent.json
        });

        // Set initial sizes for editors
        descriptionEditor.setSize(null, halfHeight);
        jsonEditor.setSize(null, halfHeight);

        // Function to adjust modal size and position
        function adjustModalSize() {
            requestAnimationFrame(() => {
                const windowWidth = window.innerWidth;
                const windowHeight = window.innerHeight;
                const modalWidth = windowWidth * 0.8;
                const modalHeight = windowHeight * 0.8;

                outerWindow.style.width = `${modalWidth}px`;
                outerWindow.style.height = `${modalHeight}px`;
                outerWindow.style.left = `${(windowWidth - modalWidth) / 2}px`;
                outerWindow.style.top = `${(windowHeight - modalHeight) / 2}px`;

                adjustEditors();
            });
        }

        // Function to adjust editor sizes
        function adjustEditors() {
            const containerHeight = outerWindow.offsetHeight - header.offsetHeight - resizer.offsetHeight;
            const topHeight = topEditorContainer.offsetHeight;
            const bottomHeight = containerHeight - topHeight;
            
            descriptionEditor.setSize(null, topHeight);
            jsonEditor.setSize(null, bottomHeight);
            
            descriptionEditor.refresh();
            jsonEditor.refresh();
        }

        // Initial adjustment and window resize listener
        adjustModalSize();
        window.addEventListener('resize', adjustModalSize);

        // Toggle view functionality
        let isRendered = false;
        toggleButton.addEventListener('click', () => {
            isRendered = !isRendered;
            if (isRendered) {
                renderedHtml.innerHTML = descriptionEditor.getValue();
                renderedHtml.style.display = 'block';
                topEditorContainer.style.display = 'none';
                toggleButton.textContent = 'View Code';
            } else {
                renderedHtml.style.display = 'none';
                topEditorContainer.style.display = 'block';
                toggleButton.textContent = 'View Rendered';
            }
            adjustEditors();
        });

        // Dragging functionality
        let isDragging = false;
        let startX, startY, startLeft, startTop;

        header.addEventListener("mousedown", dragStart);
        document.addEventListener("mousemove", drag);
        document.addEventListener("mouseup", dragEnd);

        function dragStart(e) {
            if (e.target === header) {
                isDragging = true;
                startX = e.clientX - outerWindow.offsetLeft;
                startY = e.clientY - outerWindow.offsetTop;
                outerWindow.style.transition = 'none';
            }
        }

        function drag(e) {
            if (!isDragging) return;
            requestAnimationFrame(() => {
                outerWindow.style.left = `${e.clientX - startX}px`;
                outerWindow.style.top = `${e.clientY - startY}px`;
            });
        }

        function dragEnd() {
            isDragging = false;
            outerWindow.style.transition = '';
        }

        // Vertical resizing functionality
        let isResizing = false;
        let startHeight, resizeStartY;

        resizer.addEventListener('mousedown', initResize);
        document.addEventListener('mousemove', resize);
        document.addEventListener('mouseup', stopResize);

        function initResize(e) {
            isResizing = true;
            resizeStartY = e.clientY;
            startHeight = topEditorContainer.offsetHeight;
            document.body.classList.add('resizing');
        }

        function resize(e) {
            if (!isResizing) return;
            requestAnimationFrame(() => {
                const dy = e.clientY - resizeStartY;
                const newTopHeight = startHeight + dy;
                const containerHeight = outerWindow.offsetHeight - header.offsetHeight - resizer.offsetHeight;
                
                if (newTopHeight > 50 && newTopHeight < containerHeight - 50) {
                    topEditorContainer.style.height = `${newTopHeight}px`;
                    bottomEditorContainer.style.height = `${containerHeight - newTopHeight}px`;
                    adjustEditors();
                }
            });
        }

        function stopResize() {
            isResizing = false;
            document.body.classList.remove('resizing');
            adjustEditors();
        }

        // Use ResizeObserver for efficient window resizing
        new ResizeObserver(() => {
            requestAnimationFrame(adjustEditors);
        }).observe(outerWindow);
    }

    // ... (rest of the code remains unchanged)

    $('.edit-template-content').on('click', function () {
        var templateName = $(this).closest('tr').find('.template-name-cell').data('template-name');
        $('#template-editor-overlay').show().addClass('active');
        $('#product-editor-header span').text('Edit Template: ' + templateName);

        $.ajax({
            url: sipAjax.ajax_url,
            method: 'POST',
            data: {
                action: 'sip_handle_ajax_request',
                action_type: 'template_action',
                template_action: 'edit_template',
                template_name: templateName,
                nonce: sipAjax.nonce
            },
            success: function (response) {
                if (response.success) {
                    var content = response.data.template_content;
                    
                    // Initialize editors with content
                    if (!descriptionEditor || !jsonEditor) {
                        initializeEditors(content);
                    } else {
                        // If editors already exist, update their content
                        var separatedContent = separateContent(content);
                        descriptionEditor.setValue(separatedContent.html);
                        jsonEditor.setValue(separatedContent.json);
                        
                        // Force refresh after updating content
                        setTimeout(() => {
                            descriptionEditor.refresh();
                            jsonEditor.refresh();
                        }, 0);
                    }
                } else {
                    alert('Error: ' + response.data);
                }
            },
            error: function (xhr, status, error) {
                alert('AJAX Error: ' + error);
            }
        });
    });

    // ... (rest of the code remains unchanged)
});