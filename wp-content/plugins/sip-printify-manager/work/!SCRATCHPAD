

jQuery(document).ready(function($) {
    let descriptionEditor, jsonEditor;

    function initializeEditors() {
        const outerWindow = document.getElementById('product-editor-outer-window');
        const header = document.getElementById('product-editor-header');
        const resizer = document.getElementById('product-editor-resizer');
        const toggleButton = document.getElementById('product-editor-toggle-view');
        const topEditorContainer = document.getElementById('product-editor-top-editor');
        const bottomEditorContainer = document.getElementById('product-editor-bottom-editor');
        const renderedHtml = document.getElementById('product-editor-rendered-html');

        descriptionEditor = wp.CodeMirror(topEditorContainer, {
            mode: 'htmlmixed',
            lineNumbers: true,
            lineWrapping: true,
            scrollbarStyle: 'native',
            dragDrop: false
        });

        jsonEditor = wp.CodeMirror(bottomEditorContainer, {
            mode: 'application/json',
            lineNumbers: true,
            lineWrapping: true,
            scrollbarStyle: 'native',
            dragDrop: false
        });

        let isRendered = false;
        toggleButton.addEventListener('click', () => {
            isRendered = !isRendered;
            if (isRendered) {
                renderedHtml.innerHTML = descriptionEditor.getValue();
                renderedHtml.style.display = 'block';
                topEditorContainer.style.display = 'none';
                toggleButton.textContent = 'View Code';
            } else {
                renderedHtml.style.display = 'none';
                topEditorContainer.style.display = 'block';
                toggleButton.textContent = 'View Rendered';
            }
        });

        let isDragging = false;
        let startX, startY, startLeft, startTop;

        function setPosition(left, top) {
            outerWindow.style.left = `${left}px`;
            outerWindow.style.top = `${top}px`;
        }

        header.addEventListener("mousedown", dragStart);
        document.addEventListener("mousemove", drag);
        document.addEventListener("mouseup", dragEnd);

        function dragStart(e) {
            if (e.target === header) {
                isDragging = true;
                startX = e.clientX;
                startY = e.clientY;
                startLeft = outerWindow.offsetLeft;
                startTop = outerWindow.offsetTop;
                outerWindow.style.transition = 'none';
            }
        }

        function drag(e) {
            if (isDragging) {
                e.preventDefault();
                const dx = e.clientX - startX;
                const dy = e.clientY - startY;
                setPosition(startLeft + dx, startTop + dy);
            }
        }

        function dragEnd() {
            isDragging = false;
            outerWindow.style.transition = '';
        }

        let isResizing = false;
        let originalWidth, originalHeight, originalX, originalY;

        outerWindow.addEventListener('mousedown', function(e) {
            if (e.target === outerWindow && e.offsetX > outerWindow.offsetWidth - 10 && e.offsetY > outerWindow.offsetHeight - 10) {
                isResizing = true;
                originalWidth = outerWindow.offsetWidth;
                originalHeight = outerWindow.offsetHeight;
                originalX = e.clientX;
                originalY = e.clientY;
                e.preventDefault();
            }
        });

        document.addEventListener('mousemove', function(e) {
            if (isResizing) {
                const width = originalWidth + (e.clientX - originalX);
                const height = originalHeight + (e.clientY - originalY);
                outerWindow.style.width = `${width}px`;
                outerWindow.style.height = `${height}px`;
                descriptionEditor.refresh();
                jsonEditor.refresh();
            }
        });

        document.addEventListener('mouseup', function() {
            isResizing = false;
        });

        let isResizerDragging = false;
        let startResizerY, startTopHeight;

        resizer.addEventListener('mousedown', initResize);
        document.addEventListener('mousemove', resize);
        document.addEventListener('mouseup', stopResize);

        function initResize(e) {
            e.preventDefault();
            isResizerDragging = true;
            startResizerY = e.clientY;
            startTopHeight = resizer.previousElementSibling.offsetHeight;
            document.body.classList.add('resizing');
        }

        function resize(e) {
            if (!isResizerDragging) return;
            const difference = e.clientY - startResizerY;
            const newTopHeight = startTopHeight + difference;
            const containerHeight = outerWindow.offsetHeight - header.offsetHeight - resizer.offsetHeight;
            
            if (newTopHeight > 0 && newTopHeight < containerHeight) {
                resizer.previousElementSibling.style.height = `${newTopHeight}px`;
                resizer.nextElementSibling.style.height = `${containerHeight - newTopHeight}px`;
                descriptionEditor.setSize(null, newTopHeight - 30);
                jsonEditor.setSize(null, containerHeight - newTopHeight - 30);
                descriptionEditor.refresh();
                jsonEditor.refresh();
            }
        }

        function stopResize() {
            isResizerDragging = false;
            document.body.classList.remove('resizing');
        }

        new ResizeObserver(() => {
            descriptionEditor.refresh();
            jsonEditor.refresh();
        }).observe(outerWindow);

        setTimeout(() => {
            const containerHeight = outerWindow.offsetHeight - header.offsetHeight - resizer.offsetHeight;
            const halfHeight = containerHeight / 2;
            resizer.previousElementSibling.style.height = `${halfHeight}px`;
            resizer.nextElementSibling.style.height = `${halfHeight}px`;
            descriptionEditor.setSize(null, halfHeight - 30);
            jsonEditor.setSize(null, halfHeight - 30);
            descriptionEditor.refresh();
            jsonEditor.refresh();
        }, 0);
    }

    function separateContent(content) {
        try {
            var parsedContent = JSON.parse(content);
            var description = parsedContent.description || '';
            delete parsedContent.description;
            return {
                html: description,
                json: JSON.stringify(parsedContent, null, 2)
            };
        } catch (e) {
            console.error('Error separating content:', e);
            return { html: '', json: content };
        }
    }

    $('.edit-template-content').on('click', function () {
        var templateName = $(this).closest('tr').find('.template-name-cell').data('template-name');
        $('.template-editor-overlay').show();
        $('#product-editor-header span').text('Edit Template: ' + templateName);

        if (!descriptionEditor || !jsonEditor) {
            initializeEditors();
        }

        $.ajax({
            url: sipAjax.ajax_url,
            method: 'POST',
            data: {
                action: 'sip_handle_ajax_request',
                action_type: 'template_action',
                template_action: 'edit_template',
                template_name: templateName,
                nonce: sipAjax.nonce
            },
            success: function (response) {
                if (response.success) {
                    var content = response.data.template_content;
                    var separatedContent = separateContent(content);
                    descriptionEditor.setValue(separatedContent.html);
                    jsonEditor.setValue(separatedContent.json);
                    descriptionEditor.refresh();
                    jsonEditor.refresh();
                } else {
                    alert('Error: ' + response.data);
                }
            },
            error: function (xhr, status, error) {
                alert('AJAX Error: ' + error);
            }
        });
    });

    $('#product-editor-close').on('click', function() {
        $('.template-editor-overlay').hide();
    });

    $('#product-editor-save').on('click', function() {
        var templateName = $('#product-editor-header span').text().replace('Edit Template: ', '');
        var descriptionContent = descriptionEditor.getValue();
        var jsonContent = jsonEditor.getValue();

        try {
            var parsedJson = JSON.parse(jsonContent);
            parsedJson.description = descriptionContent;
            var finalContent = JSON.stringify(parsedJson);

            $.ajax({
                url: sipAjax.ajax_url,
                method: 'POST',
                data: {
                    action: 'sip_handle_ajax_request',
                    action_type: 'template_action',
                    template_action: 'save_template',
                    template_name: templateName,
                    template_content: finalContent,
                    nonce: sipAjax.nonce
                },
                success: function (response) {
                    if (response.success) {
                        alert('Template saved successfully.');
                        $('.template-editor-overlay').hide();
                    } else {
                        alert('Error: ' + response.data);
                    }
                },
                error: function (xhr, status, error) {
                    alert('AJAX Error: ' + error);
                }
            });
        } catch (e) {
            console.error('Error re-integrating content:', e);
            alert('There was an error saving your template. Please check your JSON syntax.');
        }
    });
});