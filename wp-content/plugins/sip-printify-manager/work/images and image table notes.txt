///////////////////////////////////IMAGES AND IMAGE TABLE NOTES///////////////////////////////////////////////


I would like to add functionality to my printify manager plugin to support the management of images associated with product creation.  There are two categories of images to be managed, local images and remote images.  remote images are images that are in the printify shop data that have been loaded into the plugin through the printify API.  Local images are images that are in a local or cloud directory (google drive) that have been loaded into the plugin by the user through, ideally, drag and drop.  

 remote images are fetched when a shop is loaded. In addition to fetching and displaying products, the plugin also fetches and displays images associated with the shop.  GET /v1/uploads.json

The implementation of this functionality needs to be executed according to the current separation of functionality in the code base that is exemplified in how the shop products are fetched, stored and displayed.

The images should be displayed in the plugin interface in a table that is drawn to the right of the products table.  These two tables appear side by side in the interface as two columns on the screen in the products section of the interface below the shop section, above the template section.

These two tables, products and images, should be of fixed height on the page, with scrollbars if their content exceeds the window height.

In the images column, There should be a title that says "Images". Under it should be the action dropdown with an execute button next to it just like the products ui. under that is the table which displays the images and under that should be a drag and drop target area with an import button in it for loading local images into the table.

The actions available for the images in the images action pulldown which mirrors the product actions pulldown should include: 
*"reload shop images" GET /v1/uploads.json
*"remove from manager" (removes from plugin database)
*"add to new product" (populates the selected field in the create product table (yet to be implemented) in the plugin)
*"upload to shop" POST /v1/uploads/images.json
*"archive shop image" POST /v1/uploads/{image_id}/archive.json.

Each image row element should include:
*The images entry rows in the image table should have a checkbox toggle on the left side of each just like the products to select the target for the action pulldown.  

*a small thumbnail (This should be handled in a way where thumbnails are derived from existing images and fullsize image data is not being duplicated)
	-derived from the "preview_url": "https://example.com/artwork" property in the case of remote printify images.
	-derived in some logical and efficient way from the google drive data for local images.

*the filename
	-derived from file_name "file_name": "Image's file name" for remote images
	-derived in some logical and efficient way from the google drive data for local images.

*location (remote, remote (archived), or local)
	-remote image designation means the images is in the printify database nd is assigned when the image is added to the manager database through the printify API call.  Local images are updated to Remote when a local image has been uploaded using the API through a manager action.
	-local image designation is assigned when an image is opened (drag and drop ideally) from google drive or another local drive.

*uploaded (this should only be populated for images in the remote location)
	-derived from the "upload_time": "2020-01-09 07:29:43" property.  Should appear in the format "20_01_09 07:29".

^dimensions (WxH)
	-derived from "height", "width" properties in the case of remote images.
	-derived in some logical and efficient way from the google drive data for local images.

*size (in kB or in MB for files of 1MB or above)
	-derived from "size" property in the case of remote images.
	-derived in some logical and efficient way from the google drive data for local images.

As a starting point the main sip-printify-manager.php, the admin-page.php, the product-functions.php and the shop-functions.php have been added below.  Please plan the implementation of the above functionality based initially on the implementation of products in these files.  Please return full unabridged codeblocks with no placeholders for each updated file with the new functionality integrated into the existing code.  Do not remove comments, but add comments for the new code in a similar verbose style and update existing comments to reflect the new code where appropriate.  If the logic of the separation of functions suggests additional specialized php files, please proceed accordingly, although working within the existing separation of functions is encouraged so as not to introduce additional complexity in managing separate functions.

<?php
/*
Plugin Name: SiP Printify Manager
Description: A plugin to help manage your Printify Shop and its Products
Version: 2.0
Author: Stuff is Parts, LLC
*/

// Prevent direct access to the file for security reasons
if (!defined('ABSPATH')) exit;

/**
 * Main Plugin File: sip-printify-manager.php
 *
 * This file initializes the SiP Printify Manager plugin, sets up necessary actions, filters, and shortcodes,
 * and integrates other specialized components of the plugin.
 *
 * The core functionality is offloaded to specialized PHP files located in the 'includes' and 'views' directories:
 * - 'includes/shop-functions.php' handles shop-related functionalities like token management and encryption.
 * - 'includes/product-functions.php' manages product-related actions.
 * - 'includes/template-functions.php' deals with template management.
 * - 'views/admin-page.php' contains the HTML and PHP code for rendering the plugin's admin page.
 *
 * By offloading these functionalities to specialized files, we ensure better code organization, maintainability,
 * and prevent code duplication or unintended additions to the core file.
 */

/**
 * Include the SiP Plugin Framework
 *
 * This framework serves as a base for initializing and managing SiP plugins within the WordPress admin interface.
 * It handles plugin initialization, admin menu integration, and ensures core dependencies are active.
 */
require_once(WP_PLUGIN_DIR . '/sip-plugins-core/sip-plugin-framework.php');

/**
 * Include Specialized Functionality Files
 *
 * We include the specialized PHP files that contain functions for handling specific parts of the plugin.
 * This modular approach keeps the main plugin file clean and focused on initialization.
 */
require_once plugin_dir_path(__FILE__) . 'includes/shop-functions.php';      // Shop-related functions
require_once plugin_dir_path(__FILE__) . 'includes/product-functions.php';   // Product-related functions
require_once plugin_dir_path(__FILE__) . 'includes/template-functions.php';  // Template-related functions

/**
 * Class SiP_Printify_Manager
 *
 * Main class for the SiP Printify Manager plugin. It initializes the plugin, sets up actions and filters,
 * and handles the overall integration of the plugin components.
 *
 * Note: Most of the functionality has been offloaded to specialized PHP files in the 'includes' directory.
 * This helps in keeping the core plugin file organized and ensures that related functionalities are grouped
 * together, making future maintenance and updates more manageable.
 */
class SiP_Printify_Manager {
    // Singleton instance
    private static $instance = null;

    /**
     * Constructor
     *
     * Initializes the plugin by setting up actions, filters, and including necessary scripts.
     * Note: Most of the functionality has been offloaded to specialized files in the 'includes' directory.
     */
    private function __construct() {
        // Enqueue admin scripts and styles
        add_action('admin_enqueue_scripts', array($this, 'enqueue_admin_scripts'));

        // Handle AJAX requests
        // The actual AJAX handler functions are offloaded to specialized files
        add_action('wp_ajax_sip_handle_ajax_request', 'sip_handle_ajax_request');

        // Register the shortcode for displaying products (if needed)
        // The rendering function can be offloaded if it grows in complexity
        add_shortcode('sip_printify_products', 'render_products_shortcode');

        // Add CSS to hide admin notices on the custom admin page
        add_action('admin_head', array($this, 'hide_admin_notices_with_css'));
    }

    /**
     * Get Instance
     *
     * Implements the singleton pattern to ensure only one instance of the class exists.
     *
     * @return SiP_Printify_Manager The singleton instance of the class.
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Enqueue Admin Scripts and Styles
     *
     * Enqueues necessary CSS and JavaScript files for the admin page.
     * The actual CSS and JS files are located in the 'assets' directory.
     */
    public function enqueue_admin_scripts($hook) {
        // Enqueue styles
        wp_enqueue_style('dashicons');
        wp_enqueue_style('sip-printify-manager-style', plugin_dir_url(__FILE__) . 'assets/css/sip-printify-manager.css');

        // Enqueue scripts
        wp_enqueue_script('sip-printify-manager-script', plugin_dir_url(__FILE__) . 'assets/js/sip-printify-manager.js', array('jquery'), null, true);
        wp_enqueue_script('sip-ajax-script', plugin_dir_url(__FILE__) . 'assets/js/sip-ajax.js', array('jquery'), null, true);

        // Localize script to pass AJAX URL and nonce
        wp_localize_script('sip-ajax-script', 'sipAjax', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce'    => wp_create_nonce('sip_printify_manager_nonce')
        ));
    }

    /**
     * Hide Admin Notices with CSS
     *
     * Adds inline CSS to hide admin notices on the plugin's admin page.
     * This helps in providing a cleaner interface to the user.
     */
    public function hide_admin_notices_with_css() {
        $current_screen = get_current_screen();
        if ($current_screen && $current_screen->id === 'toplevel_page_sip-printify-manager') {
            echo '<style>.notice { display: none !important; }</style>';
        }
    }

    /**
     * Render Admin Page
     *
     * Includes the admin page view from the 'views' directory.
     * This offloads the HTML content to a separate file for better organization and separation of concerns.
     * It helps prevent HTML and presentation logic from cluttering the main plugin file.
     */
    public static function render_admin_page() {
        // Include the admin page view
        include plugin_dir_path(__FILE__) . 'views/admin-page.php';
    }

    /**
     * Activation Hook
     *
     * Runs code when the plugin is activated.
     * We generate the encryption key upon activation, using the function defined in 'includes/shop-functions.php'.
     * This offloads the key generation logic to a specialized file.
     */
    public static function activate_plugin() {
        // Generate the encryption key upon plugin activation
        sip_generate_encryption_key();
    }
}

/**
 * Initialize the Plugin
 *
 * Creates an instance of the main plugin class and sets up the plugin using the SiP Plugin Framework.
 * By initializing the plugin here, we ensure that all necessary actions and filters are registered.
 */
SiP_Printify_Manager::get_instance();

// Register activation hook
register_activation_hook(__FILE__, array('SiP_Printify_Manager', 'activate_plugin'));

// Initialize the plugin with the SiP Plugin Framework
SiP_Plugin_Framework::init_plugin(
    'SiP Printify Manager',
    __FILE__,
    'SiP_Printify_Manager'
);

/**
 * Handle AJAX Requests
 *
 * Central function to handle all AJAX requests coming from the plugin's admin page.
 * Delegates actions to specialized functions in the included files.
 *
 * By offloading specific action handlers to specialized files, we maintain a clean separation of concerns
 * and ensure that functionalities are managed in their appropriate contexts.
 * This helps prevent the main plugin file from becoming cluttered with code that is better managed elsewhere.
 */
function sip_handle_ajax_request() {
    // Verify the AJAX nonce for security
    check_ajax_referer('sip_printify_manager_nonce', 'nonce');

    // Get the action type from the AJAX request
    $action_type = sanitize_text_field($_POST['action_type']);

    // Switch based on the action type to delegate to the appropriate function
    switch ($action_type) {
        case 'save_token':
            /**
             * Token management functions are handled in 'includes/shop-functions.php'.
             * This includes saving the token and storing shop details.
             */
            sip_save_token();
            break;
        case 'reauthorize':
            /**
             * Reauthorization logic is in 'includes/shop-functions.php'.
             * It refreshes the shop details using the stored token.
             */
            sip_reauthorize();
            break;
        case 'new_token':
            /**
             * Token reset functionality is in 'includes/shop-functions.php'.
             * It clears the stored token and associated shop data.
             */
            sip_new_token();
            break;
        case 'product_action':
            /**
             * Product-related actions are handled in 'includes/product-functions.php'.
             * This includes reloading products, creating templates, and removing products from the manager.
             */
            sip_handle_product_action();
            break;
        case 'template_action':
            /**
             * Template-related actions are handled in 'includes/template-functions.php'.
             * This includes deleting, renaming, and editing templates.
             */
            sip_handle_template_action();
            break;
        case 'save_template':
            /**
             * Saving template content is handled in 'includes/template-functions.php'.
             * This function saves the edited content of a template file.
             */
            sip_save_template_content();
            break;
        default:
            // Invalid action type
            wp_send_json_error('Invalid action.');
            break;
    }
}

/**
 * Render Products Shortcode
 *
 * (Optional) Function to render products via a shortcode.
 * This function could be offloaded to 'includes/product-functions.php' if preferred.
 * By keeping it here, we maintain visibility of the shortcode registration.
 */
function render_products_shortcode($atts) {
    // This function could be offloaded to 'includes/product-functions.php' if it grows in complexity
    $products = get_option('sip_printify_products');
    ob_start();
    if (!empty($products)) {
        sip_display_product_list($products);
    } else {
        echo '<p>No products found.</p>';
    }
    return ob_get_clean();
}


<?php
/**
 * Admin Page View for SiP Printify Manager
 *
 * This file contains the HTML and PHP code for rendering the admin page of the SiP Printify Manager plugin.
 */
 
// Prevent direct access for security
if (!defined('ABSPATH')) exit;

// Retrieve necessary data
$token      = get_option('printify_bearer_token');
$shop_name  = get_option('sip_printify_shop_name');
$products   = get_option('sip_printify_products');
$templates  = sip_load_templates();

// Get the URL to the sip-plugins-core assets directory
$sip_core_assets_url = plugins_url('sip-plugins-core/assets');

// Alternatively, if the sip-plugins-core plugin defines a constant or function to get its assets URL, use that.
?>
<div id="sip-printify-manager-page">
    <div class="wrap">
        <!-- Header Section -->
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
            <h1 style="margin: 0;"><?php esc_html_e('Welcome to SIP Printify Manager!', 'sip-printify-manager'); ?></h1>
            <div id="button-container" <?php echo empty($token) ? 'style="display:none;"' : ''; ?>>
                <button id="reauthorize-button" class="button button-secondary"><?php esc_html_e('Re-authorize', 'sip-printify-manager'); ?></button>
                <button id="new-token-button" class="button button-primary"><?php esc_html_e('New Store Token', 'sip-printify-manager'); ?></button>
            </div>
        </div>
        <hr style="height: 1px; background-color: #000;">

        <!-- Spinner Overlay -->
        <div id="spinner-overlay" style="display: none;">
            <img id="spinner" src="<?php echo esc_url($sip_core_assets_url . '/images/spinner.webp'); ?>" alt="<?php esc_attr_e('Loading...', 'sip-printify-manager'); ?>">
        </div>

        <!-- Auth Container for Token Entry -->
        <div id="auth-container" <?php echo empty($token) ? '' : 'style="display:none;"'; ?>>
            <h2><?php esc_html_e("To Begin, We'll Connect To Your Account Using A Code From Printify.", 'sip-printify-manager'); ?></h2>
            <ol>
                <li>
                    Log in to your Printify account and navigate to the <a href="https://printify.com/app/account/api" target="_blank">Connections</a> page.
                </li>
                <li>
                    Provide a contact email in the "API Access" section where you would like to receive connection related notifications.
                </li>
                <li>
                    Click the <strong>Generate</strong> button to create a new API token.  This is the code we'll use to connect.
                </li>
                <li>
                    Name your token (e.g., "Printify Manager Token") and select :All scopes (full access).
                </li>
                <li>
                    Click <strong>Generate token</strong> and then Click <strong>Copy to clipboard</strong>.
                </li>
                <li>
                    Paste the token below and click <strong>Save Token</strong>.
                </li>
                <li>
                    Once saved, we'll connect to your shop and retrieve your product list.
                    From there, you'll be able to manage your Printify products and create new ones right from your Wordpress dashboard!
                </li>
            </ol>
            <p><strong>Note:</strong> It's a good idea to save the token somewhere you can access it later in case you need to re-authorize the plugin. If you lose the token, don't worry, you can just follow these steps again to generate a new one.</p>           
            
            <form id="save-token-form" method="post" action="">
                <?php wp_nonce_field('sip_printify_manager_nonce', 'sip_printify_manager_nonce_field'); ?>
                <h2>
                    <label for="printify_bearer_token"><?php esc_html_e('Printify API Token:', 'sip-printify-manager'); ?></label>
                    <input type="text" name="printify_bearer_token" id="printify_bearer_token" value="" class="regular-text" required/>
                    <input type="submit" name="save_token" value="<?php esc_attr_e('Save Token', 'sip-printify-manager'); ?>" class="button button-primary"/>
                    <img id="spinner" src="<?php echo esc_url($sip_core_assets_url . '/images/spinner.webp'); ?>" style="display: none; width: 20px; height: 20px; vertical-align: middle; margin-left: 10px;">
                </h2>
                <hr style="height: 1px; background-color: #000;">
            </form>
        </div>

        <!-- Shop Screen (only show if token exists) -->
        <div id="shop-container" <?php echo !empty($token) ? '' : 'style="display:none;"'; ?>>
            <?php if (!empty($shop_name)) : ?>
                <h2 style="text-align: center; font-weight: bold; font-size: 54px; color: #0273AB; text-transform: uppercase;">
                    <a href="https://printify.com/app/store/products/1" target="_blank" style="color: inherit; text-decoration: none;">
                        <?php echo esc_html($shop_name); ?>
                    </a>
                </h2>
                <hr style="height: 1px; background-color: #000;">
                <h2><?php esc_html_e('Products', 'sip-printify-manager'); ?></h2>
                <form id="product-action-form" style="display: flex; align-items: center;" method="post" action="">
                    <?php wp_nonce_field('sip_printify_manager_nonce', 'sip_printify_manager_nonce_field'); ?>
                    <label for="product_action"><?php esc_html_e('Product Actions:', 'sip-printify-manager'); ?> </label>
                    <select name="product_action" id="product_action">
                        <option value="reload"><?php esc_html_e('Reload', 'sip-printify-manager'); ?></option>
                        <option value="create_template"><?php esc_html_e('Create Template', 'sip-printify-manager'); ?></option>
                        <option value="remove_from_manager"><?php esc_html_e('Remove from Manager', 'sip-printify-manager'); ?></option>
                    </select>
                    <input type="submit" name="execute_action" value="<?php esc_attr_e('Execute', 'sip-printify-manager'); ?>" class="button button-secondary" style="margin-left: 10px;" />
                </form>
                <div id="product-list">
                    <?php 
                    if (!empty($products)) {
                        sip_display_product_list($products);
                    } else {
                        echo '<p>' . esc_html__('No products found.', 'sip-printify-manager') . '</p>';
                    }
                    ?>
                </div>
            <?php else : ?>
                <h2><?php esc_html_e('Shop could not be loaded. Please try re-authorizing.', 'sip-printify-manager'); ?></h2>
            <?php endif; ?>
        </div>

        <!-- Template Section -->
        <div id="template-container" <?php echo !empty($templates) && !empty($token) ? '' : 'style="display:none;"'; ?>>
            <hr style="height: 1px; background-color: #000;">
            <h2><?php esc_html_e('Templates', 'sip-printify-manager'); ?></h2>
            <form id="template-action-form" method="post" action="">
                <?php wp_nonce_field('sip_printify_manager_nonce', 'sip_printify_manager_nonce_field'); ?>
                <label for="template_action"><?php esc_html_e('Template Actions:', 'sip-printify-manager'); ?> </label>
                <select name="template_action" id="template_action">
                    <option value="delete_template"><?php esc_html_e('Delete Template', 'sip-printify-manager'); ?></option>
                    <option value="rename_template"><?php esc_html_e('Rename Template', 'sip-printify-manager'); ?></option>
                    <option value="edit_template"><?php esc_html_e('Edit Template', 'sip-printify-manager'); ?></option>
                </select>
                <input type="submit" name="execute_template_action" value="<?php esc_attr_e('Execute', 'sip-printify-manager'); ?>" class="button button-secondary"/>

                <!-- Rename Template Input -->
                <div id="rename-template-input" style="display: none; margin-top: 10px;">
                    <input type="text" name="new_template_name" placeholder="<?php esc_attr_e('New template name', 'sip-printify-manager'); ?>">
                </div>
            </form>
            <div id="template-list">
                <?php 
                sip_display_template_list($templates); 
                ?>
            </div>
            <div id="template-editor" style="display: none; margin-top: 20px;">
                <h3><?php esc_html_e('Edit Template:', 'sip-printify-manager'); ?> <span id="editing-template-name"></span></h3>
                <textarea id="template-content" rows="20" style="width: 100%;"></textarea>
                <div style="margin-top: 10px;">
                    <button id="close-editor" class="button"><?php esc_html_e('Close', 'sip-printify-manager'); ?></button>
                    <button id="revert-changes" class="button"><?php esc_html_e('Revert Changes', 'sip-printify-manager'); ?></button>
                    <button id="save-template" class="button button-primary"><?php esc_html_e('Save Changes', 'sip-printify-manager'); ?></button>
                </div>
            </div>
        </div>
    </div>
</div>


<?php

// Fetch products directly from Printify API using the Bearer token
function fetch_products($encrypted_token, $shop_id) {
    // Decrypt the token before using it
    $token = sip_decrypt_token($encrypted_token);
    
    $url = "https://api.printify.com/v1/shops/{$shop_id}/products.json";

    $response = wp_remote_get($url, array(
        'headers' => array(
            'Authorization' => 'Bearer ' . $token,
        ),
    ));

    if (is_wp_error($response)) {
        error_log('fetch_products encountered an error: ' . $response->get_error_message());
        return null;
    }

    $body = wp_remote_retrieve_body($response);
    $products = json_decode($body, true);

    if (empty($products) || !isset($products['data'])) {
        error_log('fetch_products received empty or invalid data');
        return null;
    }

    error_log('fetch_products retrieved ' . count($products['data']) . ' products');
    return $products['data']; // Return only the 'data' field that contains the products
}


// Display product list in the WordPress admin
function sip_display_product_list($products) {
    if (empty($products)) {
        error_log('sip_display_product_list found no products');
        echo '<p>No products found.</p>';
        return;
    }

    echo '<div style="max-height: 400px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px;">';
    echo '<ul style="list-style-type: none; padding-left: 0;">';
    
    foreach ($products as $product) {
        $product_url = isset($product['external']['handle']) ? esc_url($product['external']['handle']) : '#';
        echo '<li style="margin-bottom: 10px; display: flex; align-items: center;">';
        echo '<input type="checkbox" name="selected_products[]" value="' . esc_attr($product['id']) . '" style="margin-right: 10px;" />';
        echo '<a href="' . $product_url . '" target="_blank"><strong>' . esc_html($product['title']) . '</strong></a>';
        echo '</li>';
    }

    echo '</ul>';
    echo '</div>';

    error_log('sip_display_product_list completed displaying products');
}

// Handle product actions triggered via AJAX
function sip_handle_product_action() {
    $product_action = sanitize_text_field($_POST['product_action']);
    $selected_products = isset($_POST['selected_products']) ? $_POST['selected_products'] : array();

    // Get the encrypted token and decrypt it
    $encrypted_token = get_option('printify_bearer_token');
    $token = sip_decrypt_token($encrypted_token);
    $shop_id = get_option('sip_printify_shop_id');

    // Fetch and display products
    $updated_products = sip_execute_product_action($product_action, $selected_products);

    ob_start();
    sip_display_product_list($updated_products);
    $product_list_html = ob_get_clean();

    ob_start();
    $templates = sip_load_templates();
    sip_display_template_list($templates);
    $template_list_html = ob_get_clean();

    wp_send_json_success(array('product_list_html' => $product_list_html, 'template_list_html' => $template_list_html));
}

// Execute product actions based on the user's selection
function sip_execute_product_action($action, $selected_products = array()) {
    error_log("sip_execute_product_action called with action: $action");

    $encrypted_token = get_option('printify_bearer_token');
    $token = sip_decrypt_token($encrypted_token);
    $shop_id = get_option('sip_printify_shop_id');

    // Log token and shop ID
    error_log('Using API Token: ' . substr($token, 0, 5) . '***');
    error_log('Using Shop ID: ' . $shop_id);

    if ($action === 'reload') {
        error_log('Reloading products from Printify API.');

        $fetched_products = fetch_products($encrypted_token, $shop_id);

        if ($fetched_products) {
            update_option('sip_printify_products', $fetched_products);
            error_log('Products reloaded and updated in options.');
            return $fetched_products;
        } else {
            error_log('Failed to fetch products during reload action.');
            return array(); // return empty array to avoid errors
        }
    }

    $products = get_option('sip_printify_products');

    if ($action === 'remove_from_manager') {
        if (empty($selected_products)) {
            error_log('No products selected for action: remove_from_manager');
            return $products;
        }

        error_log('Removing selected products from manager.');

        $initial_count = count($products);
        $products = array_filter($products, function ($product) use ($selected_products) {
            return !in_array($product['id'], $selected_products);
        });
        $filtered_count = count($products);

        error_log("Products before removal: $initial_count, after removal: $filtered_count");

        update_option('sip_printify_products', $products);
        error_log('Updated sip_printify_products option after removal.');

    } elseif ($action === 'create_template') {
        error_log('Creating templates for selected products.');

        foreach ($selected_products as $product_id) {
            $product_data = array_filter($products, function ($product) use ($product_id) {
                return $product['id'] === $product_id;
            });

            if (!empty($product_data)) {
                $product = array_shift($product_data);
                sip_save_template($product, $product['title']);
                error_log('Template created for product ID: ' . $product_id);
            } else {
                error_log('Product ID not found in products data: ' . $product_id);
            }
        }
    } else {
        error_log('Unknown action requested: ' . $action);
    }

    return $products;
}

// Simulate processing a product with a Python script (placeholder function)
function process_product_with_python($product_data) {
    error_log('process_product_with_python function called');
    // Simulate running the Python script and getting the processed JSON back
    // Replace with actual script execution as needed
    $json_input = json_encode($product_data);
    // Example: $processed_json = shell_exec("python3 /path/to/your/script.py --json '{$json_input}'");
    $processed_json = $json_input; // Simulating the processed output
    return $processed_json;
}


<?php

/**
 * Fetch shop details directly from Printify API using the Bearer token.
 *
 * @param string $token The Bearer token for authenticating API requests.
 * @return array|null Array with shop ID and shop name, or null if error occurs.
 */
function fetch_shop_details($token) {
    $url = 'https://api.printify.com/v1/shops.json';

    $response = wp_remote_get($url, array(
        'headers' => array(
            'Authorization' => 'Bearer ' . $token,
        ),
    ));

    if (is_wp_error($response)) {
        return null;
    }

    $body = wp_remote_retrieve_body($response);
    $data = json_decode($body, true);

    if (empty($data) || !isset($data[0]['id']) || !isset($data[0]['title'])) {
        return null;
    }

    return array(
        'shop_id'   => $data[0]['id'],
        'shop_name' => $data[0]['title']
    );
}

/**
 * Save shop details retrieved from Printify API into WordPress options.
 */
function sip_connect_shop() {
    $token = get_option('printify_bearer_token');
    $shop_details = fetch_shop_details($token);
    if ($shop_details) {
        update_option('sip_printify_shop_name', $shop_details['shop_name']);
        update_option('sip_printify_shop_id', $shop_details['shop_id']);
    }
}

/**
 * Save the Printify API token and store shop details.
 */
function sip_save_token() {
    $token = sanitize_text_field($_POST['printify_bearer_token']);
    $shop_details = fetch_shop_details($token);
    if ($shop_details) {
        $encrypted_token = sip_encrypt_token($token);
        update_option('printify_bearer_token', $encrypted_token);
        update_option('sip_printify_shop_name', $shop_details['shop_name']);
        update_option('sip_printify_shop_id', $shop_details['shop_id']);
        wp_send_json_success('Token saved and connection successful.');
    } else {
        wp_send_json_error('Invalid API token. Please check and try again.');
    }
}

/**
 * Reauthorize the connection by refreshing shop details using the stored token.
 */
function sip_reauthorize() {
    $encrypted_token = get_option('printify_bearer_token');
    $token = sip_decrypt_token($encrypted_token);
    $shop_details = fetch_shop_details($token);

    if ($shop_details) {
        update_option('sip_printify_shop_name', $shop_details['shop_name']);
        update_option('sip_printify_shop_id', $shop_details['shop_id']);
        wp_send_json_success('Reauthorized successfully.');
    } else {
        wp_send_json_error('Failed to reauthorize. Please check your API token.');
    }
}

/**
 * Reset the API token and associated shop details.
 */
function sip_new_token() {
    delete_option('printify_bearer_token');  // Clear the API token
    delete_option('sip_printify_shop_name'); // Clear the saved shop name
    delete_option('sip_printify_shop_id');   // Clear the saved shop ID

    wp_send_json_success('Token reset successfully.');
}

/**
 * Generate and store the encryption key if it doesn't already exist.
 *
 * This key is used to encrypt and decrypt sensitive information such as the bearer token.
 * It is automatically generated and stored securely in the WordPress options table.
 *
 * @return string The encryption key.
 */
function sip_generate_encryption_key() {
    // Check if the encryption key already exists
    $encryption_key = get_option('sip_printify_encryption_key');

    if (empty($encryption_key)) {
        // Generate a secure encryption key (32 bytes for AES-256)
        $encryption_key = base64_encode(random_bytes(32));
        update_option('sip_printify_encryption_key', $encryption_key);
    }

    return $encryption_key;
}

/**
 * Encrypt the bearer token before storing it.
 *
 * @param string $token The plain text bearer token.
 * @return string The encrypted token.
 */
function sip_encrypt_token($token) {
    // Get the encryption key from the options or generate one if it doesn't exist
    $encryption_key = sip_generate_encryption_key();

    // Initialization Vector (IV) for AES encryption (16 bytes)
    $iv = substr(hash('sha256', '16_char_iv_here'), 0, 16);
    return openssl_encrypt($token, 'AES-256-CBC', base64_decode($encryption_key), 0, $iv);
}

/**
 * Decrypt the bearer token when retrieving it.
 *
 * @param string $encrypted_token The encrypted token.
 * @return string The plain text bearer token.
 */
function sip_decrypt_token($encrypted_token) {
    // Retrieve the encryption key
    $encryption_key = get_option('sip_printify_encryption_key');

    // Initialization Vector (IV) for AES decryption
    $iv = substr(hash('sha256', '16_char_iv_here'), 0, 16);
    return openssl_decrypt($encrypted_token, 'AES-256-CBC', base64_decode($encryption_key), 0, $iv);
}
