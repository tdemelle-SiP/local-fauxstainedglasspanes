
Next Step Spin Up
-----------------
The next goal in SiP Printify Manager Plugin development is the initial implementation of the Create New Products Action.  The Create New Products Action can be taken on any template in the template table.  When a template is chosen, Create New Products selected from the template actions popup menu and the execute button is clicked, the spinner pops up and when disappears after the Product Creation Table header columns and cells have been populated from the specific key arrangement in the selected template json array and the first row of the Product Creation Table has been populated with the values of those keys.

The next step in plugin development is the generation of those two rows in the first implementation of the Product Creation Table.

The attached files contain some of the existing core code that this functionality will be built on in addition to some provisional product creation table code to use as a starting point.



/////////////////////////////////////////////////THE LIFECYCLE OF A TEMPLATE////////////////////////////////////////////////
/////////////////////////////////////////////////////CREATING A TEMPLATE////////////////////////////////////////////////////

When a template is first created from a product, the following data is pulled directly from the selected source products json file and stored as a new template file that becomes available in the template table list.   

Here's the template data framework

{
	"title":
	"description":
	"tags": [],
	"variants": [
	    {
		"id":
		"price":
		"is_enabled":
		"options": [
			(color),
			(size)
		]	
	    },
	    {
		"id":
		"price":
		"is_enabled":
		"options": [
			(color),
			(size)
		]	
	    },
	    etc...
	],
	"blueprint_id":
	"print_provider_id":
	"print_areas": [
	    {
		"variant_ids": [
		],
		"placeholders": [
			"position":
			"images": [
				{
					"id":
					"name":
					"type":
					"height":
					"width":
					"x":
					"y":
					"scale":
					"angle":
					"src":
				},
				{
					"id":
					"name":
					"type":
					"height":
					"width":
					"x":
					"y":
					"scale":
					"angle":
					"src":
				},	
				etc...
			]
	    },
	    {
		"variant_ids": [
		],
		"placeholders": [
			etc...
	],
	"source product":
	"source product id":
	"options - colors": [
	    {
		"id":
		"title":
		"colors": [
			(#colorhex)
		]
	    },
	    etc...
	],
	"options - sizes": [
	    {
		"id":
		"title":
	    },
	    etc...
	]

}

//the following data structures are added after work has been done and saved in the Product Creation Table

//these top level categories, creations, work in progress, archived, in addition to "new", are options that appear in the "states" column in the Product Creation Table

The arrays and keys in each of these categories should reflect the data that has been edited in the Product Creation Table

new			//the default product state when a new product row is created


"creations": [	//products that have been created using the printify create product API
	"title": [
		"tags": []
		"description":
		"price":
		"sizes":
		"colors":
		"print-area":
			image#
work in progress	//products that have been modified in the table and saved, but not created
	title
		tags
		description
		price
		sizes
		colors
		print-area
			image#
archived		//products that have been archived (locally)
	title
		tags
		description
		price
		sizes
		colors
		print-area
			image#	


	When the user selects a template in the template table and chooses "create new product" from the pulldown, 
		the product creation table appears and is populated with the template data as described in more detail below
		The images table list is updated to show which images the template has used to create new products 
			-row backgrounds of images in the images table with ids that are in products in the created state are colored light green.  
			-row backgrounds of images in the images table with ids that appear in work in progress products are colored light yellow
			-row backgrounds of images in the images table that have been added to the product creation table in the current session but are not yet saved, products in the "new" state, are light blue

		((metadata shows up in a template data window above the product creation table
			-number of product variants made
			-number of colors
			-number of sizes
			-number of variant permutations
			-list of print-areas
			-eventually blueprint info, printer info))

//////////////////////////////////////////////ANATOMY OF THE PRODUCT CREATION TABLE////////////////////////////////////////
When a template is selected for creating new products, the full product creation table appears consisting of two main parts, the header and the table itself.  Once a template has been opened in the product creation table, it should remain open until closed and persist through browser refreshes and sessions.

//////////////////////////////////////////////////PRODUCT CREATION TABLE HEADER////////////////////////////////////////////
 The header area of the product creation table retains the title "product creation table" that has already been visible.  Under the section title a subtitle appears that shows the name of the currently selected template.  To the left and right of these centered titles in the header controls for building new products appear. 

The current slate of Product Creation Table header controls includes:

	import csv button - The import csv button brings up a file upload dialog that allows the user to upload a csv file that will populate the table with new products.  The csv file should be structured in the same way as the template json file.

	export csv button - The export csv button saves the current table data to a csv file that can be downloaded by the user.

	edit template json button - The edit json button brings up the existing template editor overlay.  This already exists.  The code to bring it up is in the templateEditor.js file

	save button - The save button saves changes reflected in the table to the template.json.  The table remains open for continued editing.

	close button - The close button removes the selected template from the table.  If there are unsaved changes it prompts whether the user would like to save before closing.

	publish products button - assembles the selected rows into json files that are submitted to printify through its api
			
	actions pulldown - actions that will be applied to selected cells, rows or columns.
		- reset to template
		- clear selection


///////////////////////////////////////////////THE PRODUCT CREATION TABLE TABLE////////////////////////////////////////////////

The product creation table table appears below the product creation table header 

The First Header row and the second row containing the main template data are populated

//////////////////////////////////////////////////////////HEADER ROW///////////////////////////////////////////////////////////
The first row of the table consists of table header cells populated dynamically by the keys from the loaded template arrrays.The typical compliment will include the following:
#
title				
description			
tags					
print areas			
		images (appearing in the table as "design - (print area)" headers)
options - colors
options - sizes

The table headers will have custom css styling to distinguish them from other table rows.

each table header will have a selection checkbox in the upper left corner that will select all the cells in its column.  The selected cells become the targets for the actions pulldown menu.

| checkbox | # | design - front | title | state | description | tags | colors | sizes | price | design - printlocation A | design - printlocation B | design - printlocation etc |

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
////////////////////////////////////////////////////////IMAGES/////////////////////////////////////////////////////////////////

The portion of the template array that contains the images for the product is structured like this in the template.json file:

print_areas:
	variant_ids:
	placeholders: [
		"position": "front",
		"images": [
				{
				"id": "66d5bce57c0b485c83827a0f",
				"name":	"FSGPurl98989a.svg",
				"type": "image\/png",
							"height": 65,
							"width": 800,
							"x": 0.5,
							"y": 0.82486495233750334,
							"scale": 0.4556,
							"angle": 0,
							"src": ""
				},
				{
				"id": "66d4a40ef3e52e3c26057e06",
				...
				}

The important data fields for our purposes are:
"variant_ids" - the ids of the variant products that use these images in their print areas - these are important for structuring and populating color swatch data in the Product Creation Table as explained later.
"position" - the location on the product where the image is to be printed.  This is essentially the print area.  
"id" - the printify image id and the key that well use later for identifying images in the images table
"name" - the name of the image that will be used to label the image in the product creation table


Here's how this data will drive creation of the image clusters in the Product Creation Table
Each unique "position" value will create its own header in the Product Creations Table.  This header will be titled "(position name) - Design".

Under each position there may be multiple images.  Each image in the array will be represented by a subheader cell in the table titled "image#n" from left to right corresponding to the images in the array from top to bottom.  The "(position name) - Design" main title header will span whatever number of subheaders are needed to present all the images in the position.  If a print area has only one image in it, the header cell contains simply "design - (print area)" and no subheader.

When it comes time to populate the first row of template data under the position design headers, each subheader cell will contain a small 30x30 image thumbnail derived from the url in the "src" key with the image title centered beneath it. The thumbnail should be clickable and open up a lightbox with the image in it.

Here is an example of design headers and subheaders in a case where there are four images in the print area array
						---------------------------------------------------------------------------------
						| 							(position name) - Design							|
						| 		image #1	| 		image #2	| 		image #3	| 		image #4	|
						---------------------------------------------------------------------------------						
						| image thumbnail	| image thumbnail	| image thumbnail	| image thumbnail	|	
						| image name		| image name		| image name		| image name		|
						---------------------------------------------------------------------------------

Each different position in the template will have its own segment like this across the top of the table.

There are commonly cases in which the same position is used in multiple placeholders.  These are handled by adding a new row under the position design headers for each different array of images associated with a placeholder.  In the new row, any unique image or combination of images is listed under the appropriate image # subheader.

//////////////////////////////////////////////////DETAILED IMAGE AND COLOR POPULATION NOTES///////////////////////////////////////
Here is how template data should be interpreted to populate image and color cells:

For the purposes of filling in the images tabs, go through the print_area array like this:
"variant_ids": [				    	 		   |	OPEN
        11952,					    	 		   |	REMEMBER
        11951,					    	 		   |	REMEMBER
        11953,					    	 		   |	REMEMBER
        11950,					    	 		   |	REMEMBER
        11954					    	 		   |	REMEMBER

placeholders: [     					    	    |	OPEN
	"position": "front",			   		        |	REMEMBER
	"images": [
            {            	        	            |	OPEN
			"id": "66d5bce57c0b485c83827a0f",	    |	REMEMBER
			"name":	"FSGPurl98989a.svg",		    |	REMEMBER
			"type": "image\/png",			        |	IGNORE 
                        "height": 65,			    |	IGNORE 
                        "width": 800,			    |	IGNORE
                        "x": 0.5,				    |	IGNORE
                        "y": 0.82486495233750334,   |	IGNORE
                        "scale": 0.4556,			|	IGNORE
                        "angle": 0,				    |	IGNORE
                        "src": ""				    |	IGNORE
            },
            {   					                |	INCREMENT THE IMAGE NUMBER AND MOVE TO THE NEXT IMAGE IN THE ARRAY
			"id": "66d4a40ef3e52e3c26057e06",       |	SAME PATTERN FOR ALL IMAGES IN ARRAY
            ...
            }
    ]
    }
],

Go through each of the remembered variant ids.  search the templates variants array by variant id to get option data associated with that variant id. "options": [376, 15],.  the first number represents color (the second number represents size) that can be identified in the templates options array. search options array using first number in the variant options to get color title and hex value:

    "options": [
        {
            "name": "Colors",
            "type": "color",
            "values": [
                {
                    "id": 521,
                    "title": "White",
                    "colors": [
                        "#ffffff"
                    ]
                },

Remember the list of returned color names and hex values (removing duplicates) so you can make swatches from them that correspond to the image sets associated with a print area "position" in each template.

When you get to the end of the first array, you will have the following data
| 						                    Front Design						                    |                           |
	|   image #1		|       image #2		|          image #3			|       image #4		|	        Colors		    |
	_________________________________________________________________________________________________________________________________________
	| image thumbnail	| image thumbnail	    |       image thumbnail		|       image thumbnail	|	swatches that correspond|
	| FSGPurl98989a.svg	| square_empty_black.svg| fsgp_abstract_04_3600.jpg	| FSGPtopper98989a.svg	|	to colors that make up	|
															                                                    variant ids

CYCLE THROUGH ALL THE PLACEHOLDER ENTRIES IN THE TEMPLATE ARRAY
IF YOU FIND NEW IMAGES IN A POSITION CREATE A NEW ROW UNDER THE TEMPLATE ROW AND ADD THEM TO THE APPROPRIATE COLUMN THERE.  PUT THE TITLE + "Design Variant x" incrementing the x for each new row

AT THE END WE HAVE

|			             | 						Front Design						                        |				                |
|        Title		    | image #1		    | image #2		    | image #3			    | image #4		    |	      Colors		        |
__________________________________________________________________________________________________________________________________________________________________
|			            | image thumbnail	| image thumbnail	| image thumbnail		| image thumbnail	|   swatches that correspond	|
|  FSGP Abstract 04 Tee	| FSGPurl98989a.svg	| square_empty_bl...| fsgp_abstract_04_3...	| FSGPtopper9898...	|   to colors that make up	    |
																                                            |             variant ids		|
__________________________________________________________________________________________________________________________________________________________________	
|  FSGP Abstract 04 Tee	| image thumbnail	|			        |				        | image thumbnail	|   swatches that correspond	|
|   Design Variant 01	| FSGPurl151515.svg	|			        |				        | FSGPtopper1515...	|   to colors that make Up      |
  																	                                        |            variant ids        |
__________________________________________________________________________________________________________________________________________________________________	
|  FSGP Abstract 04 Tee	| image thumbnail	|			        |				        | image thumbnail	|   swatches that correspond	|
|   Design Variant 02 	| FSGPurl303030.svg	|			        |				        | FSGPtopper3030...	|   to colors that make up      |
  																	                                        |            variant ids        |

IMAGE THUMBNAILS WILL NEED TO BE DERIVED FROM THE IMAGES IN THE IMAGES TABLE using the image id # WHICH SHOULD CONTAIN ALL IMAGES REFERENCED IN THE CREATE NEW PRODUCTS TABLE

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

each table subheader cell that represents an image in the template has a number of features.
	*image thumbnail - 
		a small 30x30 image thumbnail derived from the url in the "src" key  The thumbnail should be clickable and open up a lightbox with the image in it.
	*image name - 
		the name of the image is displayed in small text beneath the thumbnail.  If it is the default image from the template, the text is in 70% grey.  If the image has been replaced by the user, the text is 100% black.
    *selection toggle - 
		a small square checkbox in the upper left corner that will designate the column as a target for image addition.  
        When a column is selected, the user can then select a number of images in the image table, choose 'add images to new products' from the pulldown, click 'execute' and the images will populate unedited image cells one per row in the selected column.  If there ara no numbered new product rows for the images to populate, they will be automatically created with the other cells in the new rows initialized with the main template data.  In this way the user can select a large number of products and quickly create indiviudal products from each.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

///////////////////////////////////////////////////////MAIN TEMPLATE DATA ROW///////////////////////////////////////////////////
The second row of the table will populate with the main template values associated with the template keys.
	This row has custom css that distinguishes it from other rows.
	This row is not numbered.
	This cells in this row are editable and will be saved when the save button is clicked.
	there is no checkbox next to this row; this row is not selectable for product Creation
	Edits to the main template data cells will populate the corresponding cells in any new product rows created thereafter. (existing product rows created from the previous template data will not be updated)


    title				| The title in the table is assembled in part from the template title and in part from the front image name.  The code should look up the front image name in the template, find its string in the title string (or the placeholder "[title]") and replace it with the image name of whatever image is in the front image cell whether thats pulled in from the template or the user enters or drags a new image into the image thumb or front image name cells of the table - the name should then be editable.  There should be a reset icon on the far right side of the name cell that will revert it to the template name with the current front image.

    
    colors				| For all the ids in the colors array create a series of swatches in the "colors" table cell associated with that product.  The swatches are filled with the their associated colors hexadecimal value with rollover text that shows the associated colors title.

    sizes				| For all the ids in the sizes array create a series of strings in the "sizes" table cell associated with that product.  For each size show "title" values separated by commas

    description			| The description should populate from the template description.  The cell should only show the first 20 or 30 characters of the description followed by ellipsis.  There should be a document edit button on the far right side of the cell that brings up a text editor overlay using the same implementation used in the description editor already implemented in the code.  Next to the document edit button should be a reset icon that will revert it to the description in the source template.

    tags				| The tags cell should be populated from the template and the cell should be editable.  There should be a reset button on the far right of the cell that reverts the contents of the cell back to the tags in the source template.

    price			| not quite sure how to implement this yet.  Perhaps to start it could just show the range of lowest to highest price shown in the template.

    print areas			| appear in the template in the context of the design locations	

    position	| the solution for the "front" position has been included above.  Each additional position in the template should be structured in the same way and the associated headers, columns and data should be appended to the table in the order in which they appear in the template

    images		| images data is integrated as described above

	If another template is selected in the template list and the Create New Product action is executed, it should replace the currently open template.  If there are unsaved changes, the user should be prompted to save them.



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////PRODUCT CREATION TABLE///////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////// OVERVIEW//////////////////////////////////////////////////////////
There are four tables on the sip-printify-manager main page. 

Three "source tables"
products - 
	populated by an API call from the users printify shop

images - 
	populated in part by an API call from the users printify shop and also by uploaded images.

templates - 
	templates are a data form that is exclusive to the sip printify manager plugin.  Templates are the backbone of the efficient bulk new product creation process that the plugin enables.

And then the Product Creation Table where the source tables are used to create new products.

Before the product creation table appears fully and becomes interactive, the user will be guided through registering their shop (which also populates the products table and an images table, the 'sources' tables), the user may also add new images to the images table.  Finally, the user must create a template from an existing product in the products table.

Once a template is available in the template list table, the new product table can be opened by selecting a template and choosing "create new product" from the pulldown menu.

When there is not a template loaded into the product creation table, it shows only a header, "Product Creation Table" and a block of text that explains:
To Create new products, choose a template in the Templates table, select it, choose "create new product" from the dropdown menu and click "execute".  The Product Creation Table will populate with the template data and you can editing.

/////////////////////////////////////////////////THE LIFECYCLE OF A TEMPLATE////////////////////////////////////////////////
/////////////////////////////////////////////////////CREATING A TEMPLATE////////////////////////////////////////////////////

When a template is first created from a product, the following data is pulled directly from the selected source products json file and stored as a new template file that becomes available in the template table list.   

title
source product id //((need to add this to the create template code))
description			
tags				
blueprint id			
print provider id		
variants			
	id
	price
	is_enabled
print areas			
	variant ids		
	placeholders
		position
		images
			id	
			name	
			type
			height
			width
			x
			y
			scale
			angle
options - colors
	id
	title
	colors
options - sizes
	id
	title

When a template is loaded into the Product Creation Table, and new products are added, the following additional data is appended to the template json as it is edited and used to create new products.

-a record of the variants that the template has been used to create in the form of:
creations [
	title [
		tags []
		description []
		price []
		sizes [] //maybe? only if we're customizing template sizes
		colors [] //maybe? only if we're customizing template colors
		print-area [
			image#: reference to printify image # from image table images
		]
	]
]

-products in production - if a product row is not made into a product, its content is still saved and repopulates the table the next time the template is loaded

work in progress [
	title [
		tags []
		description []
		price []
		sizes [] //maybe? only if we're customizing template sizes
		colors [] //maybe? only if we're customizing template colors
		print-area [
			image#: reference to printify image # from image table images
		]
	]	
]


Certain of these elements are editable product creation table.  Others are not visible to the user except through the template json editor; they are stored exclusively to be used for the api call to printify to create new products. 
title				
description			
tags					
print areas			
		images
options - colors
options - sizes




///////////////////////////////////////////////////TEMPLATE TABLE OPTIONS/////////////////////////////////////////////////////////
Templates are displayed in the template table with the following data columns:
checkbox | Template Name | Creations | WiP
	checkbox is used to select the template as the target for actions in the template action pulldown.

	Template name - shows the template name

	Creations - shows the number of products that have been created from the template

	WiP - shows the number of products that have been started but not yet completed

The actions in the template table action pulldown consiste of the following:

create new product - 
	When the user selects a template in the template table and chooses "create new product" from the pulldown, 
		the product creation table appears and is populated with the template data as described in more detail below
		The images table list is updated to show which images the template has used to create new products 
			-row backgrounds of images in the images table with ids that appear in published products are colored light green.  
			-row backgrounds of images in the images table with ids that appear in work in progress products are colored light yellow
			-row backgrounds of images in the images table that have been added to the product creation table in the current session are light blue
			((the table should be filterable by these categories - perhaps this is something that can be added to the table footer))
		((metadata shows up in a template data window above the product creation table
			-number of product variants made
			-number of colors
			-number of sizes
			-number of variant permutations
			-list of print-areas
			-eventually blueprint info, printer info))

archive template -
	if a template is archived from the template table ((still need to add archive template pulldown option)), the source json template file is moved to an archive folder in the templates folder in local storage.  if the template being archived is active in the product creation table, the table is closed after checking to see if the user wants to save any changes that may have been made.  ((Need to add some kind of type filter to the table.   Perhaps on the table footer?  And then that convention can be used to filter out published products in the create product table as well.))

delete template -
	delete template option should be ((safeguarded with alerts)).  templates contain irreplaceable plugin data and should not be accidentally deleted.

//////////////////////////////////////////////ANATOMY OF THE PRODUCT CREATION TABLE////////////////////////////////////////
When a template is selected for creating new products, the full product creation table appears consisting of two main parts, the header and the table itself.  Once a template has been opened in the product creation table, it should remain open until closed and persist through browser refreshes and sessions.

//////////////////////////////////////////////////PRODUCT CREATION TABLE HEADER////////////////////////////////////////////
 The header area of the product creation table retains the title "product creation table" that has already been visible.  Under the section title a subtitle appears that shows the name of the currently selected template.  To the left and right of these centered titles in the header controls for building new products appear. 

The current slate of Product Creation Table header controls includes:

	import csv button - The import csv button brings up a file upload dialog that allows the user to upload a csv file that will populate the table with new products.  The csv file should be structured in the same way as the template json file.

	export csv button - The export csv button saves the current table data to a csv file that can be downloaded by the user.

	edit template json button - The edit json button brings up the existing template editor overlay.  This already exists.  The code to bring it up is in the templateEditor.js file

	save button - The save button saves changes reflected in the table to the template.json.  The table remains open for continued editing.

	close button - The close button removes the selected template from the table.  If there are unsaved changes it prompts whether the user would like to save before closing.

	publish products button - assembles the selected rows into json files that are submitted to printify through its api
			
	actions pulldown - actions that will be applied to selected cells, rows or columns.
		- reset to template
		- clear selection


///////////////////////////////////////////////THE PRODUCT CREATION TABLE TABLE///////////////////////////////////////////////////

The product creation table table appears below the product creation table header 

The First Header row and the second row containing the main template data are populated

	////////////////////////////////////////////////////////HEADER ROW///////////////////////////////////////////////////////////
The first row of the table consists of table header cells populated dynamically by the keys from the loaded template arrrays.The typical compliment will include the following:
#
title				
description			
tags					
print areas			
		images (appearing in the table as "design - (print area)" headers)
options - colors
options - sizes

The table headers will have custom css styling to distinguish them from other table rows.

each table header will have a selection checkbox in the upper left corner that will select all the cells in its column.  The selected cells become the targets for the actions pulldown menu.

Design header cells may have subheaders in a row below them to represent whatever number of images are in that print area in the template.  The subheaders are labeled 'image #1, image #2, etc'. The design header will span the subheaders below it.

If a print area has only one image in it, the header cell contains simply "design - (print area)" and no subheader.

The arrangement of the column headers for a template that includes images in 3 print locations would look like this.  Further details on how the design columns are populated follow below.

| checkbox | # | design - front | title | description | tags | colors | sizes | price | design - printlocation A | design - printlocation B | design - printlocation etc |

Here is an example of design headers and subheaders in a case where there are four images in the print area array
						| 							Design - (print area)								|
						| image thumbnail	| image thumbnail	| image thumbnail	| image thumbnail	|	
						| image name		| image name		| image name		| image name		|

each table subheader cell that represents an image in the template has a number of features.
	*image thumbnail - 
		a small 30x30 image thumbnail derived from the url in the "src" key  The thumbnail should be clickable and open up a lightbox with the image in it.
	*image name - 
		the name of the image is displayed in small text beneath the thumbnail.  If it is the default image from the template, the text is in 70% grey.  If the image has been replaced by the user, the text is 100% black.
    *selection toggle - 
		a small square checkbox in the upper left corner that will designate the column as a target for image addition.  
        When a column is selected, the user can then select a number of images in the image table, choose 'add images to new products' from the pulldown, click 'execute' and the images will populate unedited image cells one per row in the selected column.  If there ara no numbered new product rows for the images to populate, they will be automatically created with the other cells in the new rows initialized with the main template data.  In this way the user can select a large number of products and quickly create indiviudal products from each.

////////////////////////////////////////////////////MAIN TEMPLATE DATA ROW//////////////////////////////////////////////////////
The second row of the table will populate with the main template values associated with the template keys.
	This row has custom css that distinguishes it from other rows.
	This row is not numbered.
	This cells in this row are editable and will be saved when the save button is clicked.
	there is no checkbox next to this row; this row is not selectable for product Creation
	Edits to the main template data cells will populate the corresponding cells in any new product rows created thereafter. (existing product rows created from the previous template data will not be updated)

    Design - (print area)
		As described above, a product may have multiple print areas each with multiple images arranged together to create the design to be printed in that location on the product.  Each individual print area in the template is represented in the product creation table based on its array data in the template.json.

		If there is a front print area it is drawn first in the table after the row number.  If there is not a front print area, the first print area in the template is drawn in this initial position.  Additional print areas in the template are drawn after the other main template data columns in the order they appear in the template.

		If a print area has more than one image in it the header cell contains "design - (print area)" and spans a number of subheader cells drawn under it that correspond to the number of images in that print area.  the subheader cells are labeled "image #1", "image #2", etc.

		The design header should span however many images there are in the area with the "position". the images should appear in columns under the header from left to right in the order they appear from top to bottom in the source array.  Each cell should contain a small 30x30 image thumbnail derived from the url in the "src" key with the image title centered beneath it. The thumbnail should be clickable and open up a lightbox with the image in it.

						| 							Design - (print area)								|
						| image thumbnail	| image thumbnail	| image thumbnail	| image thumbnail	|	
						| image name		| image name		| image name		| image name		|


    title				| The title in the table is assembled in part from the template title and in part from the front image name.  The code should look up the front image name in the template, find its string in the title string (or the placeholder "[title]") and replace it with the image name of whatever image is in the front image cell whether thats pulled in from the template or the user enters or drags a new image into the image thumb or front image name cells of the table - the name should then be editable.  There should be a reset icon on the far right side of the name cell that will revert it to the template name with the current front image.

    
    colors				| For all the ids in the colors array create a series of swatches in the "colors" table cell associated with that product.  The swatches are filled with the their associated colors hexadecimal value with rollover text that shows the associated colors title.

    sizes				| For all the ids in the sizes array create a series of strings in the "sizes" table cell associated with that product.  For each size show "title" values separated by commas

    description			| The description should populate from the template description.  The cell should only show the first 20 or 30 characters of the description followed by ellipsis.  There should be a document edit button on the far right side of the cell that brings up a text editor overlay using the same implementation used in the description editor already implemented in the code.  Next to the document edit button should be a reset icon that will revert it to the description in the source template.

    tags				| The tags cell should be populated from the template and the cell should be editable.  There should be a reset button on the far right of the cell that reverts the contents of the cell back to the tags in the source template.

    price			| not quite sure how to implement this yet.  Perhaps to start it could just show the range of lowest to highest price shown in the template.

    print areas			| appear in the template in the context of the design locations	

    position	| the solution for the "front" position has been included above.  Each additional position in the template should be structured in the same way and the associated headers, columns and data should be appended to the table in the order in which they appear in the template

    images		| images data is integrated as described above

	If another template is selected in the template list and the Create New Product action is executed, it should replace the currently open template.  If there are unsaved changes, the user should be prompted to save them.
////////////////////////////////////////////////////DETAILED IMAGE AND COLOR POPULATION NOTES///////////////////////////////////////
Here is how template data should be interpreted to populate image and color cells:

For the purposes of filling in the images tabs, go through the print_area arrays like this:
        "variant_ids": [				    	    |	OPEN
                11952,					    	    |	REMEMBER
                11951,					    	    |	REMEMBER
                11953,					    	    |	REMEMBER
                11950,					    	    |	REMEMBER
                11954					    	    |	REMEMBER

placeholders: [     					    	    |	OPEN
	"position": "front",			   		        |	REMEMBER
	"images": [
            {            	        	            |	OPEN
			"id": "66d5bce57c0b485c83827a0f",	    |	REMEMBER
			"name":	"FSGPurl98989a.svg",		    |	REMEMBER
			"type": "image\/png",			        |	IGNORE 
                        "height": 65,			    |	IGNORE 
                        "width": 800,			    |	IGNORE
                        "x": 0.5,				    |	IGNORE
                        "y": 0.82486495233750334,   |	IGNORE
                        "scale": 0.4556,			|	IGNORE
                        "angle": 0,				    |	IGNORE
                        "src": ""				    |	IGNORE
            },
            {   					                |	INCREMENT THE IMAGE NUMBER AND MOVE TO THE NEXT IMAGE IN THE ARRAY
			"id": "66d4a40ef3e52e3c26057e06",       |	SAME PATTERN FOR ALL IMAGES IN ARRAY
            ...
            }
    ]
    }
],

Go through each of the remembered variant ids.  search the templates variants array by variant id to get option data associated with that variant id. "options": [376, 15],.  the first number represents color (the second number represents size) that can be identified in the templates options array. search options array using first number in the variant options to get color title and hex value:

    "options": [
        {
            "name": "Colors",
            "type": "color",
            "values": [
                {
                    "id": 521,
                    "title": "White",
                    "colors": [
                        "#ffffff"
                    ]
                },

Remember the list of returned color names and hex values (removing duplicates) so you can make swatches from them that correspond to the image sets associated with a print area "position" in each template.

When you get to the end of the first array, you will have the following data
| 						                    Front Design						                    |                           |
	|   image #1		|       image #2		|          image #3			|       image #4		|	        Colors		    |
	_________________________________________________________________________________________________________________________________________
	| image thumbnail	| image thumbnail	    |       image thumbnail		|       image thumbnail	|	swatches that correspond|
	| FSGPurl98989a.svg	| square_empty_black.svg| fsgp_abstract_04_3600.jpg	| FSGPtopper98989a.svg	|	to colors that make up	|
															                                                    variant ids

CYCLE THROUGH ALL THE PLACEHOLDER ENTRIES IN THE TEMPLATE ARRAY
IF YOU FIND NEW IMAGES IN A POSITION CREATE A NEW ROW UNDER THE TEMPLATE ROW AND ADD THEM TO THE APPROPRIATE COLUMN THERE.  PUT THE TITLE + "Design Variant x" incrementing the x for each new row

AT THE END WE HAVE

|			             | 						Front Design						                        |				                |
|        Title		    | image #1		    | image #2		    | image #3			    | image #4		    |	      Colors		        |
__________________________________________________________________________________________________________________________________________________________________
|			            | image thumbnail	| image thumbnail	| image thumbnail		| image thumbnail	|   swatches that correspond	|
|  FSGP Abstract 04 Tee	| FSGPurl98989a.svg	| square_empty_bl...| fsgp_abstract_04_3...	| FSGPtopper9898...	|   to colors that make up	    |
																                                            |             variant ids		|
__________________________________________________________________________________________________________________________________________________________________	
|  FSGP Abstract 04 Tee	| image thumbnail	|			        |				        | image thumbnail	|   swatches that correspond	|
|   Design Variant 01	| FSGPurl151515.svg	|			        |				        | FSGPtopper1515...	|   to colors that make Up      |
  																	                                        |            variant ids        |
__________________________________________________________________________________________________________________________________________________________________	
|  FSGP Abstract 04 Tee	| image thumbnail	|			        |				        | image thumbnail	|   swatches that correspond	|
|   Design Variant 02 	| FSGPurl303030.svg	|			        |				        | FSGPtopper3030...	|   to colors that make up      |
  																	                                        |            variant ids        |

IMAGE THUMBNAILS WILL NEED TO BE DERIVED FROM THE IMAGES IN THE IMAGES TABLE using the image id # WHICH SHOULD CONTAIN ALL IMAGES REFERENCED IN THE CREATE NEW PRODUCTS TABLE

/////////////////////////////////////////////////////////NEW PRODUCT ROWS///////////////////////////////////////////////////////////
Subsequent rows below the main template data are where new products are made, one product per row. 

	Initially new product rows are blank.  there is custom css to style the blank state.
		there is a + sign, the add product button, in the # column of the first blank product row.  When clicked the row is initialized.

	Blank product rows can be initialized in a number of ways.
		clicking the add product button next to the row - 
			There is an add product button next to each empty row.  These can be shift clicked.

		importing a csv -
			When a csv file is imported, the table is populated with new rows.  The csv file should be structured in the same way as the template json file.

		adding images to the product table -
			each new row will be numbered and populated with the main template data (in grey text) so that new products can be made by switching out the relevant cells with new images or text (turning the text black) as needed.

	When a blank product row is "initialized"
	 	a unique sequential number replaces the + sign in the first column on the left side.  This number is not associated with the product in any way except to distinguish it from other new product rows.
		the cells in the new product row populate with the data from the main template data row in 70% grey text.  When customized, the text will appear 100% black.
		each cell will have a revert icon that will revert the cell to the main template data turning the text back to grey.  The revert icon will be a small circular arrow that will appear in the upper right corner of the cell when the cell is hovered over.
		each image cell in the table will also have a small square selection toggle in the upper left corner.  
        	These can be used to designate multiple cells to send a single image to.  When a user selects cells as targets and uses the 'add image to new products' button, the selected image populates all the selected cells.
	
//////////////////////////////////////////////////////////EDITING THE TEMPLATE///////////////////////////////////////////////////


The user can then move on to edit each cell using tools made available by the plugin including adding images, tags, updating titles and descriptions.

PRODUCT CREATION
when the user has completed the population of a new product row or rows to create new products, the rows can be selected and the publish new product button can be clicked.  This will trigger the assembly of the product rows into json files that will be submitted to printify through its api so printify can create new products from them and deliver them to the users woocommerce store for sale.

Once the user has created new products and saved their template, each time the template is subsequently loaded, there will be new types of rows below the main template data row.  These rows will be color coded as follows:
	-rows containing products that have been published to printify have a light green background (these are no longer editable)
	-rows that contain saved products that have not been published to printify have a light yellow background (these are editable)
	-rows that contain products made in the current session have a white background.
Rows containing already made products can be toggled off so that the user can just review new products
























///////////////////////////////////////////////////LATER DEV///////////////////////////////////////////////////////
-----------------------------------

FOR LATER DEVELOPMENT: template sync button 
		This should be an advanced control in the settings tab or in the advanced controls tab of the sip printify manager plugin.  it scans the images list for images that have tags that share the source product, then it scans the products list for products that have the same blueprint as the template with images that correspond to the tags in the images list.  It then updates the create product table with the products that have been identified.


--------------------------------